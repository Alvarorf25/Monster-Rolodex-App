{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","charAt","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAIaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCDKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCL9CM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCHG,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOlC,MAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,OAAO,GAAGC,cAAcC,SAASd,EAAYa,kBAE5D,OACE,sBAAK/B,UAAY,MAAjB,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCVK,IAAMC,YCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.693c2cb9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className= 'card-container'>\n        <img alt=\"monster\" src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email} </p>\n    </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\n//THIS IS A FUNCTIONAL COMPONENT --------- There are 2 way to create components: class components and functional components. One of the things about components is that they take in something called \"props\" and props is a parameter that we get from our functional component. in CardList props is \"monsters= {this.state.monsters}\"\nexport const CardList = props => (  \n    <div className='card-list'>\n        {props.monsters.map(monster => (<Card key={monster.id} monster={monster} />))} \n    </div>                                               //Apply the className= 'card-list' for all the children of CardList        \n);                                ","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange}        \n    />\n);","import React from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n//THIS WAY IS A CLASS COMPONENT\nclass App extends React.Component {                         // Component also gives us acces to the \"setState()\"/(useState in React latest version) method to allows us update \"this.state\" change every shingle html object. setState({takes an object with allof the properties that you want to change at your state as well as the new values that they have})\n  constructor() {\n    super();                                                // where super does is call the constructor method on the component classe giving us access to \"this.state\"\n  \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };    \n  }\n\n  componentDidMount() {                                     // it makes react calls whatever bock of code is inside of it. So the cyle method \"componentDidMount()\" does is mount or put our component on the page and render onto the DOM the code that is inside of componentDidMount()\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())                      // converting the response into json() for javascript can understand the data is coming from the url\n    .then(users => this.setState({ monsters: users }));     // taking the info we got and set our monsters array with this info that is an array too.\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {                                                // this (monsters= {this.state.monsters}) is the argument \"props\"\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.charAt(0).toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (      \n      <div className = 'App'>\n        <h1>Monster Rolotex</h1> \n        <SearchBox\n          placeholder='Search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n/*\nif you want to know if setState() is updating the state:\n\nNOTE:\nsetState(): is an asychronous function. That means that setState is not going to act \nimmediately when we would spect it to. Because of that React gives us a solution for \nthat using a second argument that we pass into setState, it is a callback fuction which\nruns after setState finish:\n\n{this.setState({ searchField: e.target.value }, () => console.log(this.state));}\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}